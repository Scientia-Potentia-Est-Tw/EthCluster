version
optimize
codesize
evm
version
shanghai
title
CurveStableSwapNG
author
Curve
Fi
license
Copyright
Curve
Fi
all
rights
reserved
notice
Stableswap
implementation
up
to
coins
with
no
rehypothecation
the
AMM
does
not
deposit
tokens
into
other
contracts
The
Pool
also
records
exponential
moving
averages
coins
relative
to
coin
dev
Asset
Types
Standard
ERC20
token
with
no
additional
features
Note
Users
are
advised
to
careful
due
diligence
on
ERC20
tokens
that
they
interact
with
as
cannot
differentiate
between
harmless
and
malicious
ERC20
tokens
Oracle
token
with
rate
oracle
wstETH
Note
Oracles
may
be
controlled
externally
by
an
EOA
Users
are
advised
to
proceed
with
caution
Rebasing
token
with
rebase
stETH
Note
Users
and
Integrators
are
advised
to
understand
how
the
AMM
works
with
rebasing
balances
ERC4626
token
with
convertToAssets
method
sDAI
Note
Some
ERC4626
implementations
may
be
susceptible
to
Donation
Inflation
attacks
Users
are
advised
to
proceed
with
caution
Supports
ERC20
support
True
True
False
None
ERC20
tokens
can
have
arbitrary
decimals
ERC20
tokens
that
rebase
either
positive
or
fee
on
transfer
ERC20
tokens
that
have
rate
oracle
wstETH
cbETH
sDAI
etc
Note
Oracle
precision
must
be
ERC4626
tokens
with
arbitrary
precision
of
Vault
token
and
underlying
asset
Additional
features
include
Adds
price
oracles
based
on
AMM
State
Price
and
not
last
traded
price
Adds
TVL
oracle
based
on
exchange
received
swaps
that
expect
an
ERC20
transfer
to
have
occurred
prior
to
executing
the
swap
Note
If
pool
contains
rebasing
tokens
and
one
of
the
asset
types
is
Rebasing
then
calling
exchange
received
will
REVERT
If
pool
contains
rebasing
token
and
asset
types
does
not
contain
Rebasing
then
is
an
incorrect
implementation
and
rebases
can
be
stolen
Adds
get
dx
Similar
to
get
dy
which
returns
an
expected
output
of
coin
given
dx
amount
of
coin
get
dx
returns
expected
input
of
coin
an
output
amount
of
coin
Fees
are
dynamic
AMM
will
charge
higher
fee
pool
depegs
This
can
cause
very
slight
discrepancies
between
calculated
fees
and
realised
fees
from
vyper
interfaces
ERC20
from
vyper
interfaces
ERC20Detailed
from
vyper
interfaces
ERC4626
implements
ERC20
Interfaces
Factory
def
fee
receiver
def
admin
def
views
implementation
ERC1271
def
isValidSignature
hash
bytes32
signature
Bytes
bytes32
StableSwapViews
def
get
dx
int128
int128
dy
uint256
pool
uint256
def
get
dy
int128
int128
dx
uint256
pool
uint256
def
dynamic
fee
int128
int128
pool
uint256
def
calc
token
amount
amounts
DynArray
uint256
MAX
COINS
is
deposit
pool
uint256
Events
Transfer
sender
indexed
receiver
indexed
value
uint256
Approval
owner
indexed
spender
indexed
value
uint256
TokenExchange
buyer
indexed
sold
id
int128
tokens
sold
uint256
bought
id
int128
tokens
bought
uint256
TokenExchangeUnderlying
buyer
indexed
sold
id
int128
tokens
sold
uint256
bought
id
int128
tokens
bought
uint256
AddLiquidity
provider
indexed
token
amounts
DynArray
uint256
MAX
COINS
fees
DynArray
uint256
MAX
COINS
invariant
uint256
token
supply
uint256
RemoveLiquidity
provider
indexed
token
amounts
DynArray
uint256
MAX
COINS
fees
DynArray
uint256
MAX
COINS
token
supply
uint256
RemoveLiquidityOne
provider
indexed
token
id
int128
token
amount
uint256
coin
amount
uint256
token
supply
uint256
RemoveLiquidityImbalance
provider
indexed
token
amounts
DynArray
uint256
MAX
COINS
fees
DynArray
uint256
MAX
COINS
invariant
uint256
token
supply
uint256
RampA
old
uint256
uint256
initial
time
uint256
future
time
uint256
StopRampA
uint256
uint256
ApplyNewFee
fee
uint256
offpeg
fee
multiplier
uint256
MAX
COINS
uint256
max
coins
is
in
the
factory
MAX
COINS
int128
Pool
Variables
COINS
uint256
COINS
int128
PRECISION
uint256
factory
Factory
coins
DynArray
MAX
COINS
asset
types
DynArray
uint8
MAX
COINS
stored
balances
DynArray
uint256
MAX
COINS
Fee
specific
vars
FEE
DENOMINATOR
uint256
fee
uint256
fee
1e10
offpeg
fee
multiplier
uint256
1e10
admin
fee
uint256
MAX
FEE
uint256
Pool
Amplification
Parameters
PRECISION
uint256
MAX
uint256
MAX
CHANGE
uint256
initial
uint256
future
uint256
initial
time
uint256
future
time
uint256
Admin
Variables
MIN
RAMP
TIME
uint256
admin
balances
DynArray
uint256
MAX
COINS
Oracle
Specific
vars
rate
multipliers
DynArray
uint256
MAX
COINS
bytes4
method
id
bytes8
empty
bytes20
oracle
oracles
DynArray
uint256
MAX
COINS
For
ERC4626
tokens
we
need
call
amount
DynArray
uint256
MAX
COINS
scale
factor
DynArray
uint256
MAX
COINS
last
prices
packed
DynArray
uint256
MAX
COINS
packing
last
price
ma
price
last
packed
uint256
packing
last
ma
ma
exp
time
uint256
ma
time
uint256
ma
last
time
uint256
packing
ma
last
time
ma
last
time
ma
last
time
has
distinction
and
because
is
not
updated
users
remove
liquidity
but
is
shift
ORACLE
BIT
MASK
uint256
ERC20
Specific
Vars
name
String
symbol
String
decimals
uint8
version
String
v7
balanceOf
HashMap
uint256
allowance
HashMap
HashMap
uint256
total
supply
uint256
nonces
HashMap
uint256
keccak256
isValidSignature
bytes32
ERC1271
MAGIC
VAL
bytes32
0x1626ba7e00000000000000000000000000000000000000000000000000000000
EIP712
TYPEHASH
bytes32
keccak256
EIP712Domain
name
version
uint256
chainId
verifyingContract
bytes32
salt
EIP2612
TYPEHASH
bytes32
keccak256
Permit
owner
spender
uint256
value
uint256
nonce
uint256
deadline
VERSION
HASH
bytes32
keccak256
version
NAME
HASH
bytes32
CACHED
CHAIN
ID
uint256
salt
bytes32
CACHED
DOMAIN
SEPARATOR
bytes32
AMM
Setup
def
init
name
String
symbol
String
uint256
fee
uint256
offpeg
fee
multiplier
uint256
ma
exp
time
uint256
coins
DynArray
MAX
COINS
rate
multipliers
DynArray
uint256
MAX
COINS
asset
types
DynArray
uint8
MAX
COINS
method
ids
DynArray
bytes4
MAX
COINS
oracles
DynArray
MAX
COINS
notice
Initialize
the
pool
param
name
Name
of
the
plain
pool
param
symbol
Symbol
the
plain
pool
param
Amplification
co
efficient
lower
value
here
means
less
tolerance
imbalance
within
the
pool
assets
Suggested
values
include
Uncollateralized
algorithmic
stablecoins
Non
redeemable
collateralized
assets
Redeemable
assets
param
fee
Trade
fee
given
as
an
integer
with
1e10
precision
The
the
maximum
is
of
the
fee
is
distributed
to
veCRV
holders
param
offpeg
fee
multiplier
multiplier
that
determines
how
much
to
increase
Fees
by
when
assets
in
the
AMM
depeg
Example
value
param
ma
exp
time
Averaging
window
of
oracle
Set
as
time
in
seconds
ln
Example
minute
EMA
ma
exp
time
is
ln
param
coins
List
of
addresses
of
the
coins
being
used
in
the
pool
param
rate
multipliers
An
array
of
coins
decimals
in
range
COINS
param
asset
types
Array
of
uint8
representing
tokens
in
pool
param
method
ids
Array
of
first
four
of
the
Keccak
hash
of
the
signatures
of
the
oracle
addresses
that
gives
rate
oracles
Calculated
as
keccak
text
signature
replace
param
oracles
Array
of
rate
oracle
addresses
coins
coins
asset
types
asset
types
coins
uint256
len
coins
COINS
coins
COINS
convert
coins
int128
rate
multipliers
rate
multipliers
factory
Factory
msg
sender
uint256
PRECISION
self
initial
self
future
self
fee
fee
self
offpeg
fee
multiplier
offpeg
fee
multiplier
ma
exp
time
self
ma
exp
time
ma
exp
time
self
ma
time
hours
default
on
start
self
ma
last
time
self
pack
block
timestamp
block
timestamp
initialize
DynArrays
call
amount
DynArray
uint256
MAX
COINS
empty
DynArray
uint256
MAX
COINS
scale
factor
DynArray
uint256
MAX
COINS
empty
DynArray
uint256
MAX
COINS
in
range
MAX
COINS
COINS
COINS
self
last
prices
packed
append
self
pack
self
oracles
append
convert
method
ids
uint256
convert
oracles
uint256
self
stored
balances
append
self
admin
balances
append
asset
types
call
amount
append
convert
ERC20Detailed
coins
decimals
uint256
underlying
asset
ERC4626
coins
asset
scale
factor
append
convert
ERC20Detailed
underlying
asset
decimals
uint256
call
amount
append
scale
factor
append
call
amount
call
amount
scale
factor
scale
factor
ERC20
stuff
name
name
symbol
symbol
EIP712
related
params
NAME
HASH
keccak256
name
salt
block
prevhash
CACHED
CHAIN
ID
chain
id
CACHED
DOMAIN
SEPARATOR
keccak256
abi
encode
EIP712
TYPEHASH
NAME
HASH
VERSION
HASH
chain
id
self
salt
Fire
transfer
log
Transfer
empty
msg
sender
Token
transfers
in
and
out
of
the
AMM
def
transfer
in
coin
idx
int128
dx
uint256
sender
expect
optimistic
transfer
uint256
notice
Contains
all
logic
to
handle
ERC20
token
transfers
param
coin
idx
Index
of
the
coin
to
transfer
in
param
dx
amount
of
coin
to
transfer
into
the
pool
param
dy
amount
of
coin
to
transfer
out
of
the
pool
param
sender
to
transfer
coin
from
param
receiver
to
transfer
coin
to
param
expect
optimistic
transfer
True
expects
an
optimistic
coin
transfer
dx
uint256
ERC20
coins
coin
idx
balanceOf
self
Handle
Transfers
expect
optimistic
transfer
dx
dx
self
stored
balances
coin
idx
dx
dx
dx
dev
not
transferFrom
tokens
into
the
pool
ERC20
coins
coin
idx
transferFrom
sender
self
dx
default
value
True
dx
ERC20
coins
coin
idx
balanceOf
self
dx
Store
transferred
in
amount
self
stored
balances
coin
idx
dx
dx
def
transfer
out
coin
idx
int128
amount
uint256
receiver
notice
Transfer
single
token
from
the
pool
to
receiver
dev
This
is
called
by
remove
liquidity
and
remove
liquidity
one
exchange
and
withdraw
admin
fees
methods
param
coin
idx
Index
of
the
token
to
transfer
out
param
amount
Amount
of
token
to
transfer
out
param
receiver
Address
to
send
the
tokens
to
coin
balance
uint256
ERC20
coins
coin
idx
balanceOf
self
Handle
Transfers
ERC20
coins
coin
idx
transfer
receiver
amount
default
value
True
Update
Stored
Balances
self
stored
balances
coin
idx
coin
balance
amount
AMM
Special
Methods
def
stored
rates
DynArray
uint256
MAX
COINS
notice
Gets
rate
multipliers
each
coin
dev
If
the
coin
has
rate
oracle
that
has
been
properly
initialised
method
queries
that
rate
by
static
calling
an
rates
DynArray
uint256
MAX
COINS
rate
multipliers
oracles
DynArray
uint256
MAX
COINS
self
oracles
in
range
MAX
COINS
COINS
asset
types
and
not
oracles
NOTE
fetched
rate
is
assumed
to
be
precision
fetched
rate
uint256
convert
raw
call
convert
oracles
abi
encode
oracles
ORACLE
BIT
MASK
max
outsize
is
static
call
True
uint256
rates
unsafe
div
rates
fetched
rate
PRECISION
elif
asset
types
ERC4626
fetched
rate
uint256
ERC4626
coins
convertToAssets
call
amount
scale
factor
here
call
amount
has
ERC4626
precision
but
the
returned
value
is
scaled
up
to
scale
factor
which
is
underlying
asset
has
decimals
rates
unsafe
div
rates
ERC4626
coins
convertToAssets
call
amount
scale
factor
PRECISION
1e18
precision
rates
def
balances
DynArray
uint256
MAX
COINS
notice
Calculates
the
pool
balances
excluding
the
admin
balances
dev
If
the
pool
contains
rebasing
tokens
method
ensures
LPs
keep
all
rebases
and
admin
only
claims
swap
fees
This
also
means
that
since
admin
balances
are
stored
in
an
array
and
not
inferred
from
read
balances
the
fees
in
the
rebasing
token
that
the
admin
collects
is
immune
to
slashing
events
result
DynArray
uint256
MAX
COINS
empty
DynArray
uint256
MAX
COINS
balances
uint256
in
range
MAX
COINS
COINS
in
asset
types
balances
ERC20
coins
balanceOf
self
self
admin
balances
balances
self
stored
balances
self
admin
balances
result
append
balances
result
AMM
Main
Functions
nonreentrant
lock
def
exchange
int128
int128
dx
uint256
min
dy
uint256
receiver
msg
sender
uint256
notice
Perform
an
exchange
between
two
coins
dev
Index
values
can
be
found
via
the
coins
getter
method
param
Index
value
the
coin
to
send
param
Index
value
of
the
coin
to
recieve
param
dx
Amount
of
being
exchanged
param
min
dy
Minimum
amount
of
to
receive
Actual
amount
of
received
self
exchange
msg
sender
dx
min
dy
receiver
False
nonreentrant
lock
def
exchange
received
int128
int128
dx
uint256
min
dy
uint256
receiver
msg
sender
uint256
notice
Perform
an
exchange
between
two
coins
without
transferring
token
in
dev
The
swaps
tokens
based
on
change
in
balance
of
coin
The
dx
ERC20
coin
balanceOf
self
self
stored
balances
Users
of
method
are
dex
aggregators
arbitrageurs
or
other
users
who
not
wish
to
grant
approvals
to
the
they
would
instead
send
tokens
directly
to
the
and
call
exchange
received
Note
This
is
disabled
pool
contains
rebasing
tokens
param
Index
value
the
coin
to
send
param
Index
valie
of
the
coin
to
recieve
param
dx
Amount
of
being
exchanged
param
min
dy
Minimum
amount
of
to
receive
Actual
amount
of
received
not
in
asset
types
dev
exchange
received
not
supported
pool
contains
rebasing
tokens
self
exchange
msg
sender
dx
min
dy
receiver
True
swap
optimistically
nonreentrant
lock
def
add
liquidity
amounts
DynArray
uint256
MAX
COINS
min
mint
amount
uint256
receiver
msg
sender
uint256
notice
Deposit
coins
into
the
pool
param
amounts
List
of
amounts
of
coins
to
deposit
param
min
mint
amount
Minimum
amount
of
LP
tokens
to
mint
from
the
deposit
param
receiver
Address
that
owns
the
minted
LP
tokens
Amount
of
LP
tokens
received
by
depositing
amp
uint256
self
old
balances
DynArray
uint256
MAX
COINS
self
balances
rates
DynArray
uint256
MAX
COINS
self
stored
rates
Initial
invariant
D0
uint256
self
get
mem
rates
old
balances
amp
total
supply
uint256
self
total
supply
balances
DynArray
uint256
MAX
COINS
old
balances
Do
Transfers
In
in
range
MAX
COINS
COINS
amounts
balances
self
transfer
in
amounts
msg
sender
False
expect
optimistic
transfer
total
supply
dev
initial
deposit
requires
all
coins
Invariant
after
change
D1
uint256
self
get
mem
rates
balances
amp
D1
D0
We
need
to
recalculate
the
invariant
accounting
fees
to
calculate
fair
user
share
fees
DynArray
uint256
MAX
COINS
empty
DynArray
uint256
MAX
COINS
mint
amount
uint256
total
supply
ideal
balance
uint256
difference
uint256
balance
uint256
ys
uint256
D0
D1
COINS
xs
uint256
dynamic
fee
uint256
Only
account
fees
we
are
not
the
first
to
deposit
base
fee
uint256
self
fee
COINS
COINS
in
range
MAX
COINS
COINS
ideal
balance
D1
old
balances
D0
difference
balance
balances
ideal
balance
balance
difference
ideal
balance
balance
difference
balance
ideal
balance
fee
dynamic
fee
difference
FEE
DENOMINATOR
xs
unsafe
div
rates
old
balances
balance
PRECISION
dynamic
fee
self
dynamic
fee
xs
ys
base
fee
fees
append
dynamic
fee
difference
FEE
DENOMINATOR
self
admin
balances
fees
admin
fee
FEE
DENOMINATOR
balances
fees
xp
DynArray
uint256
MAX
COINS
self
xp
mem
rates
balances
D1
self
get
xp
amp
Reuse
D1
value
mint
amount
total
supply
D1
D0
D0
self
upkeep
oracles
xp
amp
D1
mint
amount
D1
Take
the
dust
there
was
any
re
instantiate
oracle
totalSupply
is
zero
self
last
packed
self
pack
D1
D1
mint
amount
min
mint
amount
Slippage
screwed
you
Mint
pool
tokens
total
supply
mint
amount
self
balanceOf
receiver
mint
amount
self
total
supply
total
supply
log
Transfer
empty
receiver
mint
amount
log
AddLiquidity
msg
sender
amounts
fees
D1
total
supply
mint
amount
nonreentrant
lock
def
remove
liquidity
one
coin
burn
amount
uint256
int128
min
received
uint256
receiver
msg
sender
uint256
notice
Withdraw
single
coin
from
the
pool
param
burn
amount
Amount
of
LP
tokens
to
burn
in
the
withdrawal
param
Index
value
of
the
coin
to
withdraw
param
min
received
Minimum
amount
of
coin
to
receive
param
receiver
Address
that
receives
the
withdrawn
coins
Amount
of
coin
received
burn
amount
dev
not
remove
LP
tokens
dy
uint256
fee
uint256
xp
DynArray
uint256
MAX
COINS
empty
DynArray
uint256
MAX
COINS
amp
uint256
empty
uint256
uint256
empty
uint256
dy
fee
xp
amp
self
calc
withdraw
one
coin
burn
amount
dy
min
received
Not
enough
coins
removed
self
admin
balances
fee
admin
fee
FEE
DENOMINATOR
self
burnFrom
msg
sender
burn
amount
self
transfer
out
dy
receiver
log
RemoveLiquidityOne
msg
sender
burn
amount
dy
self
total
supply
self
upkeep
oracles
xp
amp
dy
nonreentrant
lock
def
remove
liquidity
imbalance
amounts
DynArray
uint256
MAX
COINS
max
burn
amount
uint256
receiver
msg
sender
uint256
notice
Withdraw
coins
from
the
pool
in
an
imbalanced
amount
param
amounts
List
of
amounts
of
underlying
coins
to
withdraw
param
max
burn
amount
Maximum
amount
of
LP
token
to
burn
in
the
withdrawal
param
receiver
Address
that
receives
the
withdrawn
coins
Actual
amount
of
the
LP
token
burned
in
the
withdrawal
amp
uint256
self
rates
DynArray
uint256
MAX
COINS
self
stored
rates
old
balances
DynArray
uint256
MAX
COINS
self
balances
D0
uint256
self
get
mem
rates
old
balances
amp
balances
DynArray
uint256
MAX
COINS
old
balances
in
range
MAX
COINS
COINS
amounts
balances
amounts
self
transfer
out
amounts
receiver
D1
uint256
self
get
mem
rates
balances
amp
base
fee
uint256
self
fee
COINS
COINS
ys
uint256
D0
D1
COINS
fees
DynArray
uint256
MAX
COINS
empty
DynArray
uint256
MAX
COINS
dynamic
fee
uint256
xs
uint256
ideal
balance
uint256
difference
uint256
balance
uint256
in
range
MAX
COINS
COINS
ideal
balance
D1
old
balances
D0
difference
balance
balances
ideal
balance
balance
difference
ideal
balance
balance
difference
balance
ideal
balance
xs
unsafe
div
rates
old
balances
balance
PRECISION
dynamic
fee
self
dynamic
fee
xs
ys
base
fee
fees
append
dynamic
fee
difference
FEE
DENOMINATOR
self
admin
balances
fees
admin
fee
FEE
DENOMINATOR
balances
fees
D1
self
get
mem
rates
balances
amp
dev
reuse
D1
self
upkeep
oracles
balances
amp
D1
total
supply
uint256
self
total
supply
burn
amount
uint256
D0
D1
total
supply
D0
burn
amount
dev
zero
tokens
burned
burn
amount
max
burn
amount
Slippage
screwed
you
total
supply
burn
amount
self
burnFrom
msg
sender
burn
amount
log
RemoveLiquidityImbalance
msg
sender
amounts
fees
D1
total
supply
burn
amount
nonreentrant
lock
def
remove
liquidity
burn
amount
uint256
min
amounts
DynArray
uint256
MAX
COINS
receiver
msg
sender
claim
admin
fees
True
DynArray
uint256
MAX
COINS
notice
Withdraw
coins
from
the
pool
dev
Withdrawal
amounts
are
based
on
current
deposit
ratios
param
burn
amount
Quantity
of
LP
tokens
to
burn
in
the
withdrawal
param
min
amounts
Minimum
amounts
of
underlying
coins
to
receive
param
receiver
Address
that
receives
the
withdrawn
coins
List
of
amounts
of
coins
that
were
withdrawn
total
supply
uint256
self
total
supply
burn
amount
dev
invalid
burn
amount
amounts
DynArray
uint256
MAX
COINS
empty
DynArray
uint256
MAX
COINS
balances
DynArray
uint256
MAX
COINS
self
balances
value
uint256
in
range
MAX
COINS
COINS
value
balances
burn
amount
total
supply
value
min
amounts
Withdrawal
resulted
in
fewer
coins
than
expected
amounts
append
value
self
transfer
out
value
receiver
self
burnFrom
msg
sender
burn
amount
Updates
self
total
supply
Upkeep
oracle
ma
last
time
unpacked
uint256
self
unpack
self
ma
last
time
last
packed
current
uint256
self
last
packed
old
uint256
last
packed
current
self
last
packed
self
pack
old
unsafe
div
old
burn
amount
total
supply
proportionally
reduce
self
calc
moving
average
last
packed
current
self
ma
time
ma
last
time
unpacked
ma
last
time
unpacked
block
timestamp
ma
last
time
unpacked
block
timestamp
self
ma
last
time
self
pack
ma
last
time
unpacked
ma
last
time
unpacked
Log
log
RemoveLiquidity
msg
sender
amounts
empty
DynArray
uint256
MAX
COINS
total
supply
burn
amount
Withdraw
admin
fees
claim
admin
fees
is
set
to
True
claim
admin
fees
self
withdraw
admin
fees
amounts
def
withdraw
admin
fees
notice
Claim
admin
fees
Callable
by
anyone
self
withdraw
admin
fees
AMM
Internal
Functions
def
dynamic
fee
xpi
uint256
xpj
uint256
fee
uint256
uint256
offpeg
fee
multiplier
uint256
self
offpeg
fee
multiplier
offpeg
fee
multiplier
FEE
DENOMINATOR
fee
xps2
uint256
xpi
xpj
offpeg
fee
multiplier
fee
offpeg
fee
multiplier
FEE
DENOMINATOR
xpi
xpj
xps2
FEE
DENOMINATOR
def
exchange
uint256
xp
DynArray
uint256
MAX
COINS
rates
DynArray
uint256
MAX
COINS
int128
int128
uint256
amp
uint256
self
uint256
self
get
xp
amp
uint256
self
get
xp
amp
dy
uint256
xp
just
in
case
there
were
some
rounding
errors
dy
fee
uint256
dy
self
dynamic
fee
xp
xp
self
fee
FEE
DENOMINATOR
Convert
all
to
real
units
dy
dy
dy
fee
PRECISION
rates
self
admin
balances
dy
fee
admin
fee
FEE
DENOMINATOR
PRECISION
rates
Calculate
and
store
state
prices
xp
DynArray
uint256
MAX
COINS
xp
xp
xp
is
not
changed
because
we
did
not
apply
fee
self
upkeep
oracles
xp
amp
dy
def
exchange
sender
int128
int128
dx
uint256
min
dy
uint256
receiver
expect
optimistic
transfer
uint256
dev
coin
index
out
of
range
dx
dev
not
exchange
coins
rates
DynArray
uint256
MAX
COINS
self
stored
rates
old
balances
DynArray
uint256
MAX
COINS
self
balances
xp
DynArray
uint256
MAX
COINS
self
xp
mem
rates
old
balances
Do
Transfer
in
dx
is
whatever
the
pool
received
after
ERC20
transfer
dx
uint256
self
transfer
in
dx
sender
expect
optimistic
transfer
Exchange
uint256
xp
dx
rates
PRECISION
dy
uint256
self
exchange
xp
rates
dy
min
dy
Exchange
resulted
in
fewer
coins
than
expected
Do
Transfer
out
self
transfer
out
dy
receiver
log
TokenExchange
msg
sender
dx
dy
dy
def
withdraw
admin
fees
fee
receiver
factory
fee
receiver
fee
receiver
empty
dev
fee
receiver
not
set
admin
balances
DynArray
uint256
MAX
COINS
self
admin
balances
in
range
MAX
COINS
COINS
admin
balances
self
transfer
out
admin
balances
fee
receiver
admin
balances
self
admin
balances
admin
balances
AMM
Math
Functions
def
get
int128
int128
uint256
xp
DynArray
uint256
MAX
COINS
amp
uint256
uint256
uint256
Calculate
one
makes
Done
by
solving
quadratic
equation
iteratively
sum
prod
in
the
input
is
converted
to
the
same
price
precision
dev
same
coin
dev
below
zero
COINS
dev
above
COINS
should
be
unreachable
but
good
safety
COINS
amp
uint256
amp
uint256
uint256
uint256
prev
uint256
uint256
Ann
uint256
amp
COINS
in
range
MAX
COINS
COINS
elif
xp
COINS
PRECISION
Ann
COINS
uint256
PRECISION
Ann
uint256
in
range
prev
Equality
with
the
precision
of
prev
prev
prev
raise
def
get
xp
DynArray
uint256
MAX
COINS
amp
uint256
uint256
invariant
calculation
in
non
overflowing
integer
operations
iteratively
sum
prod
Converging
solution
sum
prod
uint256
in
xp
uint256
Ann
uint256
amp
COINS
uint256
Dprev
uint256
in
range
in
xp
COINS
Dprev
Ann
PRECISION
COINS
Ann
PRECISION
PRECISION
COINS
unsafe
div
Ann
PRECISION
COINS
unsafe
div
Ann
PRECISION
PRECISION
unsafe
add
COINS
Equality
with
the
precision
of
Dprev
Dprev
Dprev
convergence
typically
occurs
in
rounds
or
less
should
be
unreachable
it
does
happen
the
pool
is
borked
and
LPs
can
withdraw
via
remove
liquidity
raise
def
get
uint256
int128
xp
DynArray
uint256
MAX
COINS
uint256
uint256
Calculate
one
reduces
from
being
calculated
xp
to
Done
by
solving
quadratic
equation
iteratively
sum
prod
in
the
input
is
converted
to
the
same
price
precision
dev
below
zero
COINS
dev
above
COINS
uint256
uint256
prev
uint256
uint256
Ann
uint256
COINS
in
range
MAX
COINS
COINS
xp
COINS
PRECISION
Ann
COINS
uint256
PRECISION
Ann
uint256
in
range
prev
Equality
with
the
precision
of
prev
prev
prev
raise
def
uint256
Handle
ramping
up
or
down
t1
uint256
self
future
time
A1
uint256
self
future
block
timestamp
t1
A0
uint256
self
initial
t0
uint256
self
initial
time
Expressions
in
uint256
cannot
have
negative
numbers
thus
A1
A0
A0
A1
A0
block
timestamp
t0
t1
t0
A0
A0
A1
block
timestamp
t0
t1
t0
when
t1
or
block
timestamp
t1
A1
def
xp
mem
rates
DynArray
uint256
MAX
COINS
balances
DynArray
uint256
MAX
COINS
DynArray
uint256
MAX
COINS
result
DynArray
uint256
MAX
COINS
empty
DynArray
uint256
MAX
COINS
in
range
MAX
COINS
COINS
result
append
rates
balances
PRECISION
result
def
get
mem
rates
DynArray
uint256
MAX
COINS
balances
DynArray
uint256
MAX
COINS
amp
uint256
uint256
xp
DynArray
uint256
MAX
COINS
self
xp
mem
rates
balances
self
get
xp
amp
def
calc
withdraw
one
coin
burn
amount
uint256
int128
uint256
uint256
DynArray
uint256
MAX
COINS
uint256
uint256
First
need
to
calculate
Get
current
Solve
Eqn
against
token
amount
amp
uint256
self
rates
DynArray
uint256
MAX
COINS
self
stored
rates
xp
DynArray
uint256
MAX
COINS
self
xp
mem
rates
self
balances
D0
uint256
self
get
xp
amp
total
supply
uint256
self
total
supply
D1
uint256
D0
burn
amount
D0
total
supply
uint256
self
get
amp
xp
D1
base
fee
uint256
self
fee
COINS
COINS
ys
uint256
D0
D1
COINS
xp
reduced
DynArray
uint256
MAX
COINS
xp
dx
expected
uint256
xp
uint256
xavg
uint256
dynamic
fee
uint256
in
range
MAX
COINS
COINS
dx
expected
xp
xp
dx
expected
xp
D1
D0
xavg
xp
dx
expected
xp
xp
D1
D0
xavg
xp
dynamic
fee
self
dynamic
fee
xavg
ys
base
fee
xp
reduced
xp
dynamic
fee
dx
expected
FEE
DENOMINATOR
dy
uint256
xp
reduced
self
get
amp
xp
reduced
D1
dy
uint256
xp
PRECISION
rates
fees
dy
dy
PRECISION
rates
Withdraw
less
to
account
rounding
errors
update
xp
with
calculations
xp
dy
dy
dy
xp
amp
D1
AMM
Price
Methods
def
pack
p1
uint256
p2
uint256
uint256
p1
p2
p1
p2
def
unpack
packed
uint256
uint256
packed
packed
def
get
xp
DynArray
uint256
MAX
COINS
amp
uint256
uint256
DynArray
uint256
MAX
COINS
dx
dx
only
however
can
have
any
number
of
coins
in
pool
ANN
uint256
unsafe
mul
amp
COINS
Dr
uint256
unsafe
div
pow
mod256
COINS
COINS
in
range
MAX
COINS
COINS
Dr
Dr
xp
DynArray
uint256
MAX
COINS
empty
DynArray
uint256
MAX
COINS
xp0
uint256
ANN
xp
PRECISION
in
range
MAX
COINS
COINS
append
xp0
Dr
xp
xp
xp0
Dr
def
upkeep
oracles
xp
DynArray
uint256
MAX
COINS
amp
uint256
uint256
notice
Upkeeps
price
and
oracles
ma
last
time
unpacked
uint256
self
unpack
self
ma
last
time
last
prices
packed
current
DynArray
uint256
MAX
COINS
self
last
prices
packed
last
prices
packed
DynArray
uint256
MAX
COINS
last
prices
packed
current
spot
price
DynArray
uint256
MAX
COINS
self
get
xp
amp
Upkeep
price
oracle
in
range
MAX
COINS
COINS
spot
price
Upate
packed
prices
last
prices
packed
self
pack
spot
price
self
calc
moving
average
last
prices
packed
current
self
ma
exp
time
ma
last
time
unpacked
index
is
ma
exp
time
prices
self
last
prices
packed
last
prices
packed
Upkeep
oracle
last
packed
current
uint256
self
last
packed
self
last
packed
self
pack
self
calc
moving
average
last
packed
current
self
ma
time
ma
last
time
unpacked
index
is
ma
exp
time
Housekeeping
Update
ma
last
time
and
oracles
in
range
ma
last
time
unpacked
block
timestamp
ma
last
time
unpacked
block
timestamp
self
ma
last
time
self
pack
ma
last
time
unpacked
ma
last
time
unpacked
def
calc
moving
average
packed
value
uint256
averaging
window
uint256
ma
last
time
uint256
uint256
last
spot
value
uint256
packed
value
last
ema
value
uint256
packed
value
ma
last
time
block
timestamp
calculate
ema
value
and
that
alpha
uint256
self
exp
convert
block
timestamp
ma
last
time
averaging
window
int256
last
spot
value
alpha
last
ema
value
alpha
last
ema
value
def
last
price
uint256
uint256
self
last
prices
packed
def
ema
price
uint256
uint256
self
last
prices
packed
def
get
uint256
uint256
notice
Returns
the
AMM
State
price
of
token
dev
it
will
the
state
price
of
coin
param
index
of
state
price
coin
coin
uint256
The
state
price
quoted
by
the
AMM
coin
amp
uint256
self
xp
DynArray
uint256
MAX
COINS
self
xp
mem
self
stored
rates
self
balances
uint256
self
get
xp
amp
self
get
xp
amp
nonreentrant
lock
def
price
oracle
uint256
uint256
self
calc
moving
average
self
last
prices
packed
self
ma
exp
time
self
ma
last
time
nonreentrant
lock
def
oracle
uint256
self
calc
moving
average
self
last
packed
self
ma
time
self
ma
last
time
Math
Utils
def
exp
int256
uint256
dev
Calculates
the
natural
exponential
of
signed
integer
with
precision
of
1e18
notice
Note
that
consumes
about
gas
units
The
implementation
is
inspired
by
Remco
Bloemen
implementation
under
the
MIT
license
here
https
dev
This
implementation
is
derived
from
Snekmate
which
is
authored
by
pcaversaccio
Snekmate
distributed
under
the
AGPL
license
https
param
The
byte
variable
int256
The
byte
calculation
result
value
int256
If
the
result
is
we
zero
This
happens
when
we
have
the
following
floor
log
5e18
1e18
42e18
empty
uint256
When
the
result
is
1e18
we
cannot
represent
it
as
signed
integer
This
happens
when
floor
log
1e18
1e18
wad
exp
overflow
is
now
in
the
range
1e18
Convert
to
higher
intermediate
precision
and
binary
base
This
base
conversion
is
multiplication
with
1e18
value
unsafe
div
Reduce
the
range
of
to
ln
ln
by
factoring
out
powers
of
two
so
that
exp
exp
where
is
signer
integer
Solving
gives
round
log
and
log
Thus
is
in
the
range
int256
unsafe
add
unsafe
div
value
value
unsafe
sub
value
unsafe
mul
Evaluate
term
rational
approximation
Since
is
monic
we
will
multiply
by
scaling
factor
later
int256
unsafe
add
unsafe
mul
unsafe
add
value
value
int256
unsafe
add
unsafe
mul
unsafe
add
unsafe
mul
unsafe
sub
unsafe
add
value
value
We
leave
in
the
base
so
that
we
not
have
to
scale
it
up
again
the
division
int256
unsafe
add
unsafe
mul
unsafe
sub
value
value
unsafe
sub
unsafe
mul
value
unsafe
add
unsafe
mul
value
unsafe
sub
unsafe
mul
value
unsafe
add
unsafe
mul
value
The
polynomial
has
no
zeros
in
the
range
because
all
its
roots
are
complex
No
scaling
is
required
as
is
already
too
large
Also
is
in
the
range
after
the
division
int256
unsafe
div
To
finalise
the
calculation
we
have
to
multiply
by
the
scale
factor
the
factor
from
the
range
reduction
and
the
factor
1e18
the
base
conversion
We
all
at
once
with
an
intermediate
result
in
base
so
that
the
final
right
shift
always
gives
positive
value
Note
that
to
circumvent
Vyper
safecast
feature
the
potentially
negative
parameter
value
we
first
convert
to
bytes32
and
subsequently
to
uint256
Remember
that
the
EVM
default
behaviour
is
to
use
two
complement
representation
to
handle
signed
integers
unsafe
mul
convert
convert
bytes32
uint256
convert
unsafe
sub
uint256
ERC20
Utils
def
domain
separator
bytes32
chain
id
CACHED
CHAIN
ID
keccak256
abi
encode
EIP712
TYPEHASH
NAME
HASH
VERSION
HASH
chain
id
self
salt
CACHED
DOMAIN
SEPARATOR
def
transfer
from
to
value
uint256
NOTE
vyper
does
not
allow
underflows
so
the
following
subtraction
would
on
insufficient
balance
self
balanceOf
from
value
self
balanceOf
to
value
log
Transfer
from
to
value
def
burnFrom
from
burn
amount
uint256
self
total
supply
burn
amount
self
balanceOf
from
burn
amount
log
Transfer
from
empty
burn
amount
def
transfer
to
value
uint256
dev
Transfer
token
specified
param
to
The
to
transfer
to
param
value
The
amount
to
be
transferred
self
transfer
msg
sender
to
value
True
def
transferFrom
from
to
value
uint256
dev
Transfer
tokens
from
one
to
another
param
from
The
which
you
want
to
send
tokens
from
param
to
The
which
you
want
to
transfer
to
param
value
uint256
the
amount
of
tokens
to
be
transferred
self
transfer
from
to
value
allowance
uint256
self
allowance
from
msg
sender
allowance
max
value
uint256
self
allowance
from
msg
sender
allowance
value
True
def
approve
spender
value
uint256
notice
Approve
the
passed
to
transfer
the
specified
amount
of
tokens
on
behalf
of
msg
sender
dev
Beware
that
changing
an
allowance
via
method
brings
the
risk
that
someone
may
use
both
the
old
and
allowance
by
unfortunate
transaction
ordering
https
param
spender
The
which
will
transfer
the
funds
param
value
The
amount
of
tokens
that
may
be
transferred
success
self
allowance
msg
sender
spender
value
log
Approval
msg
sender
spender
value
True
def
permit
owner
spender
value
uint256
deadline
uint256
uint8
bytes32
bytes32
notice
Approves
spender
by
owner
signature
to
expend
owner
tokens
See
https
dev
Inspired
by
https
dev
Supports
smart
wallets
which
implement
ERC1271
https
param
owner
The
which
is
source
of
funds
and
has
signed
the
Permit
param
spender
The
which
is
allowed
to
spend
the
funds
param
value
The
amount
of
tokens
to
be
spent
param
deadline
The
timestamp
after
which
the
Permit
is
no
longer
valid
param
The
of
the
valid
secp256k1
signature
of
permit
by
owner
param
The
of
the
valid
secp256k1
signature
of
permit
by
owner
param
The
of
the
valid
secp256k1
signature
of
permit
by
owner
True
transaction
completes
successfully
owner
empty
block
timestamp
deadline
nonce
uint256
self
nonces
owner
digest
bytes32
keccak256
concat
x19
x01
self
domain
separator
keccak256
abi
encode
EIP2612
TYPEHASH
owner
spender
value
nonce
deadline
owner
is
sig
Bytes
concat
abi
encode
slice
convert
bytes32
reentrancy
not
concern
since
is
staticcall
ERC1271
owner
isValidSignature
digest
sig
ERC1271
MAGIC
VAL
ecrecover
digest
convert
uint256
convert
uint256
convert
uint256
owner
self
allowance
owner
spender
value
self
nonces
owner
nonce
log
Approval
owner
spender
value
True
def
DOMAIN
SEPARATOR
bytes32
notice
EIP712
domain
separator
bytes32
Domain
Separator
set
the
current
chain
self
domain
separator
AMM
View
Functions
def
get
dx
int128
int128
dy
uint256
uint256
notice
Calculate
the
current
input
dx
given
output
dy
dev
Index
values
can
be
found
via
the
coins
getter
method
param
Index
value
the
coin
to
send
param
Index
valie
of
the
coin
to
recieve
param
dy
Amount
of
being
received
after
exchange
Amount
of
predicted
StableSwapViews
factory
views
implementation
get
dx
dy
self
def
get
dy
int128
int128
dx
uint256
uint256
notice
Calculate
the
current
output
dy
given
input
dx
dev
Index
values
can
be
found
via
the
coins
getter
method
param
Index
value
the
coin
to
send
param
Index
valie
of
the
coin
to
recieve
param
dx
Amount
of
being
exchanged
Amount
of
predicted
StableSwapViews
factory
views
implementation
get
dy
dx
self
def
calc
withdraw
one
coin
burn
amount
uint256
int128
uint256
notice
Calculate
the
amount
received
when
withdrawing
single
coin
param
burn
amount
Amount
of
LP
tokens
to
burn
in
the
withdrawal
param
Index
value
of
the
coin
to
withdraw
Amount
of
coin
received
self
calc
withdraw
one
coin
burn
amount
nonreentrant
lock
def
totalSupply
uint256
notice
The
total
supply
of
pool
LP
tokens
self
total
supply
decimals
self
total
supply
nonreentrant
lock
def
get
price
uint256
notice
The
current
price
of
the
pool
LP
token
dev
Useful
calculating
profits
The
method
may
be
vulnerable
to
donation
style
attacks
implementation
contains
rebasing
tokens
For
integrators
caution
is
advised
LP
token
price
normalized
to
1e18
amp
uint256
self
xp
DynArray
uint256
MAX
COINS
self
xp
mem
self
stored
rates
self
balances
uint256
self
get
xp
amp
is
in
the
units
similar
to
DAI
converted
to
precision
1e18
When
balanced
total
value
of
the
portfolio
PRECISION
self
total
supply
def
calc
token
amount
amounts
DynArray
uint256
MAX
COINS
is
deposit
uint256
notice
Calculate
addition
or
reduction
in
token
supply
from
deposit
or
withdrawal
param
amounts
Amount
of
each
coin
being
deposited
param
is
deposit
set
True
deposits
False
withdrawals
Expected
amount
of
LP
tokens
received
StableSwapViews
factory
views
implementation
calc
token
amount
amounts
is
deposit
self
def
uint256
self
PRECISION
def
precise
uint256
self
def
balances
uint256
uint256
notice
Get
the
current
balance
of
coin
within
the
pool
less
the
accrued
admin
fees
param
Index
value
the
coin
to
query
balance
of
Token
balance
self
balances
def
get
balances
DynArray
uint256
MAX
COINS
self
balances
def
stored
rates
DynArray
uint256
MAX
COINS
self
stored
rates
def
dynamic
fee
int128
int128
uint256
notice
Return
the
fee
swapping
between
and
param
Index
value
the
coin
to
send
param
Index
value
of
the
coin
to
recieve
Swap
fee
expressed
as
an
integer
with
1e10
precision
StableSwapViews
factory
views
implementation
dynamic
fee
self
AMM
Admin
Functions
def
ramp
future
uint256
future
time
uint256
msg
sender
factory
admin
dev
only
owner
block
timestamp
self
initial
time
MIN
RAMP
TIME
future
time
block
timestamp
MIN
RAMP
TIME
dev
insufficient
time
initial
uint256
self
future
uint256
future
PRECISION
future
and
future
MAX
future
initial
future
MAX
CHANGE
initial
future
initial
MAX
CHANGE
self
initial
initial
self
future
future
self
initial
time
block
timestamp
self
future
time
future
time
log
RampA
initial
future
block
timestamp
future
time
def
stop
ramp
msg
sender
factory
admin
dev
only
owner
current
uint256
self
self
initial
current
self
future
current
self
initial
time
block
timestamp
self
future
time
block
timestamp
now
block
timestamp
t1
is
always
False
so
we
saved
log
StopRampA
current
block
timestamp
def
set
fee
fee
uint256
offpeg
fee
multiplier
uint256
msg
sender
factory
admin
set
fee
fee
MAX
FEE
self
fee
fee
set
offpeg
fee
multiplier
offpeg
fee
multiplier
fee
MAX
FEE
FEE
DENOMINATOR
dev
offpeg
multiplier
exceeds
maximum
self
offpeg
fee
multiplier
offpeg
fee
multiplier
log
ApplyNewFee
fee
offpeg
fee
multiplier
def
set
ma
exp
time
ma
exp
time
uint256
ma
time
uint256
notice
Set
the
moving
average
window
of
the
price
oracles
param
ma
exp
time
Moving
average
window
It
is
time
in
seconds
ln
msg
sender
factory
admin
dev
only
owner
not
in
ma
exp
time
ma
time
self
ma
exp
time
ma
exp
time
self
ma
time
ma
time
